Step 1: Add dependencies 

(i) JDBC API 

Database connectivity API specifies how the client connects and queries a database. 

Maven - pom.xml 

 

<dependency> 

    <groupId>org.springframework.boot</groupId> 

    <artifactId>spring-boot-starter-jdbc</artifactId> 

</dependency> 

(ii) MySQL Driver MySQL JDBC and R2DBC driver to work with the database. 

Maven - pom.xml 

 

<dependency> 

    <groupId>mysql</groupId> 

    <artifactId>mysql-connector-java</artifactId> 

    <scope>runtime</scope> 

</dependency> 

 

Lightbox 

 

Step 2: pom.xml 

<?xml version="1.0" encoding="UTF-8"?> 

<project xmlns="http://maven.apache.org/POM/4.0.0" 

xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 

xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"> 

<modelVersion>4.0.0</modelVersion> 

<parent> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-starter-parent</artifactId> 

<version>2.6.3</version> 

<relativePath/> <!-- lookup parent from repository --> 

</parent> 

<groupId>sia</groupId> 

<artifactId>GFG</artifactId> 

<version>0.0.1-SNAPSHOT</version> 

<name>GFG</name> 

<description>Demo project for Spring Boot</description> 

<properties> 

<java.version>11</java.version> 

</properties> 

<dependencies> 

<dependency> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-starter-thymeleaf</artifactId> 

</dependency> 

<dependency> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-starter-web</artifactId> 

</dependency> 

<dependency> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-devtools</artifactId> 

<scope>runtime</scope> 

<optional>true</optional> 

</dependency> 

<dependency> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-starter-test</artifactId> 

<scope>test</scope> 

</dependency> 

<dependency> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-starter</artifactId> 

</dependency> 

<dependency> 

<groupId>mysql</groupId> 

<artifactId>mysql-connector-java</artifactId> 

<scope>runtime</scope> 

</dependency> 

<dependency> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-starter-jdbc</artifactId> 

</dependency> 

<dependency> 

<groupId>org.projectlombok</groupId> 

<artifactId>lombok</artifactId> 

<optional>true</optional> 

</dependency> 

<dependency> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-starter-security</artifactId> 

</dependency> 

<dependency> 

<groupId>org.springframework.security</groupId> 

<artifactId>spring-security-test</artifactId> 

<scope>test</scope> 

</dependency> 

</dependencies> 

<build> 

<plugins> 

<plugin> 

<groupId>org.springframework.boot</groupId> 

<artifactId>spring-boot-maven-plugin</artifactId> 

<configuration> 

<excludes> 

<exclude> 

<groupId>org.projectlombok</groupId> 

<artifactId>lombok</artifactId> 

</exclude> 

</excludes> 

</configuration> 

</plugin> 

</plugins> 

</build> 

</project> 

 

Step 3: GfgApplication.java 

// Java Program to Illustrate Boot of Spring Application 

package gfg; 

import org.springframework.boot.SpringApplication; 

import org.springframework.boot.autoconfigure.SpringBootApplication; 

// Annotation 

@SpringBootApplication 

// Application(Main) Class 

public class GfgApplication { 

// Main driver method 

public static void main(String[] args) 

{ 

 

SpringApplication.run(GfgApplication.class, args); 

} 

} 

Step 4: Datasource Implementation(ConfigDataSource.java) 

// Java Program Illustrating Configuration of 

// DataSourceConfiguration of DataSource 

package gfg; 

import javax.sql.DataSource; 

import org.springframework.boot.jdbc.DataSourceBuilder; 

import org.springframework.context.annotation.Bean; 

import org.springframework.context.annotation.Configuration; 

// Annotation 

@Configuration 

// Class 

public class ConfigDataSource { 

@Bean public static DataSource source() 

{ 

DataSourceBuilder<> dSB		= DataSourceBuilder.create(); 

dSB.driverClassName("com.mysql.jdbc.Driver"); 

// MySQL specific url with database name 

dSB.url("jdbc:mysql://localhost:3306/userdetails"); 

// MySQL username credential 

dSB.username("user"); 

// MySQL password credential 

dSB.password("password"); 

return dSB.build(); 

} 

} 

Step 5: UserDetails.java 

// Java Program Illustrating User Credentials to 

// be Stored in the Database 

package geek.details; 

import lombok.Data; 

// Annotation for Getter/Setter methods 

@Data 

public class UserDetails { 

 

String user; 

String userName; 

String password; 

} 

Step 6: To use Spring Security, add the following dependency: 

Maven â€“ pom.xml 

<dependency> 

    <groupId>org.springframework.boot</groupId> 

    <artifactId>spring-boot-starter-security</artifactId> 

</dependency> 

         

<dependency> 

    <groupId>org.springframework.security</groupId> 

    <artifactId>spring-security-test</artifactId> 

    <scope>test</scope> 

</dependency> 
